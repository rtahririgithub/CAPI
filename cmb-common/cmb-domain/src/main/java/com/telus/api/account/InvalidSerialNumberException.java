/* Generated by Together */

package com.telus.api.account;

import com.telus.api.*;


public class InvalidSerialNumberException extends TelusAPIException {

  public static final int EQUIPMENT_NOT_ANALOG        = 1;
  public static final int UNKNOWN_SERIALNUMBER_PREFIX = 2;
  public static final int EQUIPMENT_INUSE             = 3;
  public static final int UNKNOWN_EQUIPMENT           = 4;
  public static final int EQUIPMENT_NOT_IDEN          = 5;
  public static final int EQUIPMENT_NOT_PCS           = 6;
  public static final int EQUIPMENT_NOT_ALLOWED       = 7;
  public static final int EQUIPMENT_NOT_SIM           = 8;
  public static final int EQUIPMENT_NOT_MULE          = 9;
  public static final int EQUIPMENT_NOT_PAGER         = 10;
  public static final int EQUIPMENT_NOT_BOXED_PAGER   = 11;
  public static final int EQUIPMENT_REQUIRE_A_MULE    = 12;
//Add error reason code for Holbron R2
  public static final int EQUIPMENT_STOLEN    		  = 13;
  public static final int EQUIPMENT_NOT_ASSIGNABLE    = 14;
  public static final int EQUIPMENT_ISEXPIRED         = 15;
  public static final int EQUIPMENT_ACTIVATED_ON_DIFF_SUB = 16;
  public static final int CHANNEL_ID_NOT_MATCH		  = 17;
  public static final int EQUIPMENT_GREY_MARKET		  = 18;
  
  private int reason;
  private String serialNumber;

  public InvalidSerialNumberException(String message, Throwable exception, String serialNumber, int reason) {
    super(message, exception);
    this.serialNumber = serialNumber;
    this.reason = reason;
  }

  public InvalidSerialNumberException(Throwable exception, String serialNumber, int reason) {
    super(exception);
    this.serialNumber = serialNumber;
    this.reason = reason;
  }

  public InvalidSerialNumberException(String message, String serialNumber, int reason) {
    super(message);
    this.serialNumber = serialNumber;
    this.reason = reason;
  }

  public InvalidSerialNumberException(String serialNumber, int reason) {
    super(getReasonText(reason));
    this.serialNumber = serialNumber;
    this.reason = reason;
  }

  public InvalidSerialNumberException(String message, Throwable exception, String serialNumber) {
    super(message, exception);
    this.serialNumber = serialNumber;
  }

  public InvalidSerialNumberException(Throwable exception, String serialNumber) {
    super(exception);
    this.serialNumber = serialNumber;
  }

  public InvalidSerialNumberException(String message, String serialNumber) {
    super(message);
    this.serialNumber = serialNumber;
  }
  
  public InvalidSerialNumberException(String message) {
    super(message);
  }

  public String getSerialNumber() {
    return serialNumber;
  }

  public int getReason() {
    return reason;
  }

  public String getReasonText() {
    return getReasonText(reason);
  }

  private static String getReasonText(int reason) {
    switch (reason) {
      case  EQUIPMENT_NOT_ANALOG:         return "Serial number does not belong to an analog phone";
      case  UNKNOWN_SERIALNUMBER_PREFIX:  return "unknown manufacturer prefix for serial number";
      case  EQUIPMENT_INUSE:              return "Serial number Already in Use";
      case  UNKNOWN_EQUIPMENT:            return "Serial number Not Found";
      case  EQUIPMENT_NOT_IDEN:           return "Serial number is not IDEN";
      case  EQUIPMENT_NOT_PCS:            return "Serial number is not PCS";
      case  EQUIPMENT_NOT_ALLOWED:		  return "Serial number is not allowed";
      case  EQUIPMENT_NOT_SIM:            return "Serial number is not SIM card Number";
      case  EQUIPMENT_NOT_MULE:           return "Serial number is not Mule Number";
      case  EQUIPMENT_NOT_PAGER:          return "Serial number is not Pager";
      case  EQUIPMENT_NOT_BOXED_PAGER:    return "Serial number is not a Boxed Pager";
      case  EQUIPMENT_REQUIRE_A_MULE:	  return "Serial number is required a mule";
      //add for Holborn R2
      case  EQUIPMENT_STOLEN:			  return "Serial number is stolen or lost";
      case  EQUIPMENT_NOT_ASSIGNABLE:	  return "Serial number is not assignable";
      case  EQUIPMENT_ISEXPIRED:		  return "Serial number is expired";
      case  EQUIPMENT_ACTIVATED_ON_DIFF_SUB: return "Serial number is activated on different subscriber";
      case  CHANNEL_ID_NOT_MATCH: 		  return "Channel IDs do not match to equipment shipping to location";
      case  EQUIPMENT_GREY_MARKET: 		  return "Serial number does not support this brand";
      default:                            return "Unknown";
    }
  }

}

